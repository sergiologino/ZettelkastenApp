package com.example.noteapp.config;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final JwtTokenProvider jwtTokenProvider;

    public JwtAuthenticationFilter(JwtTokenProvider jwtTokenProvider) {
        this.jwtTokenProvider = jwtTokenProvider;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
            throws ServletException, IOException {

        String requestURI = request.getRequestURI();
        System.out.println("–ó–∞–ø—Ä–æ—Å: " + requestURI);

        // –†–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–∏–Ω–∞
        String authHeader = null; // üí° –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –û–ë–™–Ø–í–õ–Ø–ï–ú –ó–ê–†–ê–ù–ï–ï

        try {
            authHeader = request.getHeader("Authorization"); // üí° –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization: " + e.getMessage());
        }

        String token = null;
        String username = null;

        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            token = authHeader.substring(7); // üí° –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            username = jwtTokenProvider.getUsernameFromToken(token); // üí° –ü–æ–ª—É—á–∞–µ–º username –∏–∑ —Ç–æ–∫–µ–Ω–∞
            System.out.println("username: " + username);
        }

        if (token != null && username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = jwtTokenProvider.loadUserByUsername(username);

            if (jwtTokenProvider.validateToken(token, userDetails)) {
                var authentication = jwtTokenProvider.getAuthentication(token, userDetails);
                SecurityContextHolder.getContext().setAuthentication(authentication);
                System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + username + " —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω");
            } else {
                System.out.println("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π");
                SecurityContextHolder.getContext().setAuthentication(null);
            }
        }

        if (requestURI.startsWith("/api/auth/register") ||
                requestURI.startsWith("/api/auth/login") ||
                requestURI.startsWith("/api/auth/sync")) {
            System.out.println("–ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É");
            chain.doFilter(request, response);
            return;
        }

        // –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–ª—å—à–µ –≤ —Ü–µ–ø–æ—á–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        chain.doFilter(request, response);
    }

}

