package com.example.noteapp.controller;

import com.example.noteapp.config.JwtTokenProvider;
import com.example.noteapp.dto.UserRegistrationDTO;
import com.example.noteapp.model.Project;
import com.example.noteapp.model.User;
import com.example.noteapp.repository.ProjectRepository;
import com.example.noteapp.repository.UserRepository;
import com.example.noteapp.service.ProjectService;
import com.example.noteapp.service.UserService;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.user.OAuth2User;

import java.time.LocalDateTime;
import java.util.*;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.web.client.RestTemplate;

@RestController
@RequestMapping("/api/auth")
@Tag(name = "Auth API", description = "API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
public class AuthController {

    private final UserService userService;
    private final UserRepository userRepository;
    private final JwtTokenProvider jwtTokenProvider;
    private final Map<String, String> stateStore = new HashMap<>();
    private final PasswordEncoder passwordEncoder;
    private final ProjectService projectService;
    private final ProjectRepository projectRepository;


    public AuthController(UserService userService, UserRepository userRepository, JwtTokenProvider jwtTokenProvider, PasswordEncoder passwordEncoder, ProjectService projectService, ProjectRepository projectRepository) {
        this.userService = userService;
        this.userRepository = userRepository;
        this.jwtTokenProvider = jwtTokenProvider;
        this.passwordEncoder = passwordEncoder;
        this.projectService = projectService;
        this.projectRepository = projectRepository;
    }



    @PostMapping("/login")
    @Operation(summary = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", description = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–æ–≤")
    public ResponseEntity<Map<String, String>> login(@RequestBody User user) {
        System.out.println("–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + user.getUsername());
        System.out.println("–í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: " + user.getPassword());

        return userService.findByUsername(user.getUsername())
                .map(u -> {
                    System.out.println("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å: " + user.getPassword());
                    System.out.println("–ü–∞—Ä–æ–ª—å –∏–∑ –ë–î: " + u.getPassword());
                    System.out.println("–°–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –ø–∞—Ä–æ–ª—å? " + passwordEncoder.matches(user.getPassword(), u.getPassword()));

                    if (!passwordEncoder.matches(user.getPassword(), u.getPassword())) {
                        return ResponseEntity.status(401).body(Collections.singletonMap("error", "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"));
                    }
                    String accessToken = jwtTokenProvider.generateAccessToken(user.getUsername());
                    String refreshToken = jwtTokenProvider.generateRefreshToken(user.getUsername());

                    Map<String, String> tokens = new HashMap<>();
                    tokens.put("accessToken", accessToken);
                    tokens.put("refreshToken", refreshToken);
                    System.out.println("–ü–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–µ–ª: " + user.getPassword());
                    System.out.println("–ü–∞—Ä–æ–ª—å –∏–∑ –ë–î: " + u.getPassword());
                    System.out.println("–ü–∞—Ä–æ–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç? " + passwordEncoder.matches(user.getPassword(), u.getPassword()));
                    return ResponseEntity.ok(tokens);
                })
                .orElse(ResponseEntity.status(401).build());
    }

    @RestController
    public class OAuth2LoginController {

        @GetMapping("/dashboard")
        public String getDashboard(@AuthenticationPrincipal OAuth2User user) {
            return "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + user.getAttribute("name");
        }
    }

    @GetMapping("/oauth2/authorize/yandex")
    @Operation(summary = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OAuth —Å –Ø–Ω–¥–µ–∫—Å")
    public ResponseEntity<Map<String, String>> initiateYandexOAuth() {

        String state = Base64.getEncoder().encodeToString(UUID.randomUUID().toString().getBytes());
        System.out.println("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ state (–¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è): " + state);
        stateStore.put(state, "valid"); // –°–æ—Ö—Ä–∞–Ω—è–µ–º state –≤ –ø–∞–º—è—Ç–∏
        Map<String, String> response = new HashMap<>();
        response.put("state", state);

        System.out.println("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OAuth —Å –Ø–Ω–¥–µ–∫—Å, stateStore: " + stateStore);

        return ResponseEntity.ok(response);
    }

    @GetMapping("/login/oauth2/code/yandex")
    @Operation(summary = "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞")
    public ResponseEntity<String> handleYandexCallback(
            @RequestParam("code") String code,
            @RequestParam("state") String state) {
        if (!stateStore.containsKey(state)) {
            return ResponseEntity.badRequest().body("Invalid state parameter");
        }

        // –£–¥–∞–ª—è–µ–º state, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        stateStore.remove(state);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ accessToken
        RestTemplate restTemplate = new RestTemplate();
        String tokenUri = "https://oauth.yandex.ru/token";

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);

        MultiValueMap<String, String> body = new LinkedMultiValueMap<>();
        body.add("grant_type", "authorization_code");
        body.add("code", code);
        body.add("client_id", "a0bc7b7381a84739be01111f12d9447e");
        body.add("client_secret", "c0701b6fad07403c8a8b6f9e99874e1f");
        body.add("redirect_uri", "http://localhost:8081/login/oauth2/code/yandex");

        HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<>(body, headers);
        System.out.println("–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ø–Ω–¥–µ–∫—Å: "+request);

        ResponseEntity<String> responseYand = restTemplate.postForEntity(tokenUri, request, String.class);



        if (responseYand.getStatusCode().is2xxSuccessful()) {

            String appBackendUrl = "http://localhost:8080/api/users/sync";
            ResponseEntity<String> response = restTemplate.postForEntity(appBackendUrl, request, String.class);

            return ResponseEntity.ok("–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: " + response.getBody());
        } else {
            return ResponseEntity.status(responseYand.getStatusCode()).body("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞");
        }
    }

    @PostMapping("/register")
    @Operation(
            summary = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            description = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.",
            responses = {
                    @ApiResponse(
                            responseCode = "200",
                            description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.",
                            content = @Content(mediaType = "application/json")
                    ),
                    @ApiResponse(
                            responseCode = "400",
                            description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                            content = @Content(mediaType = "application/json")
                    ),
                    @ApiResponse(
                            responseCode = "500",
                            description = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.",
                            content = @Content(mediaType = "application/json")
                    )
            }
    )
    public ResponseEntity<String> register(@RequestBody UserRegistrationDTO userDTO) {

        if (SecurityContextHolder.getContext().getAuthentication() != null) {
            System.out.println("–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!");
        }

        // üõë –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
        if (userService.findByUsername(userDTO.getUsername()).isPresent()) {
            System.out.println("–û–ë–ù–ê–†–£–ñ–ï–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨! " + userDTO.getUsername());
            return ResponseEntity.badRequest().body("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
        }
        String hashedPassword = passwordEncoder.encode(userDTO.getPassword());
//        System.out.println("–•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: " + hashedPassword);

        // ‚úÖ –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ–º `syncUser()`, –Ω–æ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
        User user = new User();
        user.setUsername(userDTO.getUsername());
        user.setPassword(hashedPassword);
        user.setEmail(userDTO.getEmail());




        ResponseEntity<String> response = syncUser(user);
        System.out.println("–û—Ç–≤–µ—Ç syncUser: " + response.getStatusCode());

        if (!response.getStatusCode().is2xxSuccessful()) {
            return ResponseEntity.status(response.getStatusCode()).body("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.");
        }

        // ‚úÖ –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ syncUser
        //userService.registerUser(user);

        return ResponseEntity.ok("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.");
    }


    @PostMapping("/sync")
        public ResponseEntity<String> syncUser(@RequestBody User user) {
//          –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ `register()`
        System.out.println("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user.getUsername());

        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        if (authentication != null) {
            String currentUser = authentication.getName();
            System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é: " + currentUser);
        } else {
            userService.registerUser(user);
            System.out.println("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ syncUser.");


            // ‚ùå –ù–µ –≤—ã–∑—ã–≤–∞–µ–º `userService.registerUser(user)`, –æ–Ω —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!

            // ‚úÖ –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç "–ì–ª–∞–≤–Ω–æ–µ" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Project defaultProject = new Project();
            defaultProject.setName("–ú–æ–π –ø—Ä–æ–µ–∫—Ç");
            defaultProject.setDescription("–ü—Ä–æ–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
            defaultProject.setColor("#BD10E0");
            defaultProject.setPosition(1);
            defaultProject.setDefault(true);
            defaultProject.setUserId(user.getId());
            defaultProject.setCreatedAt(LocalDateTime.now());

            projectRepository.save(defaultProject);

        }

            return ResponseEntity.ok("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω.");
        }
    }

