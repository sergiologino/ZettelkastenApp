package com.example.noteapp.controller;

import com.example.noteapp.dto.NoteDTO;
import com.example.noteapp.model.Note;
import com.example.noteapp.service.NoteService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/notes")
public class NoteController {

    private final NoteService noteService;

    public NoteController(NoteService noteService) {
        this.noteService = noteService;
    }

    @Operation(summary = "Получить все заметки", description = "Возвращает список всех заметок из базы данных.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Список заметок успешно возвращен",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = Note.class))),
            @ApiResponse(responseCode = "500", description = "Ошибка сервера")
    })
    @GetMapping
    public List<Note> getAllNotes() {
        return noteService.getAllNotes();
    }

    @Operation(summary = "Получить заметку по ID", description = "Возвращает заметку с указанным UUID.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Заметка успешно возвращена",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = Note.class))),
            @ApiResponse(responseCode = "404", description = "Заметка не найдена"),
            @ApiResponse(responseCode = "500", description = "Ошибка сервера")
    })
    @GetMapping("/{id}")
    public Note getNoteById(@PathVariable UUID id) {
        return noteService.getNoteById(id);
    }

    @Operation(summary = "Создать новую заметку", description = "Сохраняет новую заметку в базе данных.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Заметка успешно создана",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = NoteDTO.class))),
            @ApiResponse(responseCode = "400", description = "Некорректные данные"),
            @ApiResponse(responseCode = "500", description = "Ошибка сервера")
    })
    @PostMapping
    public NoteDTO createNote(@RequestBody NoteDTO noteDTO) {
        return noteService.saveNote(noteDTO);
    }

    @Operation(summary = "Удалить заметку", description = "Удаляет заметку с указанным UUID из базы данных.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204", description = "Заметка успешно удалена"),
            @ApiResponse(responseCode = "404", description = "Заметка не найдена"),
            @ApiResponse(responseCode = "500", description = "Ошибка сервера")
    })
    @DeleteMapping("/{id}")
    public void deleteNoteById(@PathVariable UUID id) {
        noteService.deleteNoteById(id);
    }
    @PutMapping("/{id}/tags")
    public Note addTagsToNote(
            @PathVariable UUID id,
            @RequestBody List<String> tags,
            @RequestParam(defaultValue = "false") boolean isAutoGenerated
    ) {
        return noteService.addTagsToNote(id, tags, isAutoGenerated);
    }
}