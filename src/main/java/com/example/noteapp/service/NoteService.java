package com.example.noteapp.service;

import com.example.noteapp.dto.NoteDTO;
import com.example.noteapp.integration.IntegrationException;
import com.example.noteapp.integration.IntegrationService;
import com.example.noteapp.mapper.AbstractConverter;
import com.example.noteapp.model.Note;
import com.example.noteapp.model.Project;
import com.example.noteapp.model.Tag;
import com.example.noteapp.repository.NoteRepository;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.UUID;

@Service
public class NoteService {

    private final AbstractConverter converter;
    private final NoteRepository noteRepository;
    private final TagService tagService;
    private final IntegrationService integrationService;

    public NoteService(AbstractConverter converter, NoteRepository noteRepository, TagService tagService, IntegrationService integrationService) {
        this.converter = converter;
        this.noteRepository = noteRepository;
        this.tagService = tagService;
        this.integrationService = integrationService;
    }

    public List<Note> getAllNotes() {
        return noteRepository.findAll();
    }

    public Note getNoteById(UUID id) {
        return noteRepository.findById(id).orElseThrow(() -> new RuntimeException("Note not found"));
    }

    public Note saveNote(Note note) {
        return noteRepository.save(note);
    }

    public void deleteNoteById(UUID id) {
        noteRepository.deleteById(id);
    }

    public Note addTagsToNote(UUID noteId, List<String> tagNames, boolean isAutoGenerated) {
        Note note = noteRepository.findById(noteId).orElseThrow(() -> new RuntimeException("Note not found"));

        try {
            // Вызываем интеграционный сервис для анализа содержимого
            List<String> autoTags = integrationService.analyzeNoteContent(note.getContent());

            // Присваиваем автоматически сгенерированные теги
            for (String tagName : autoTags) {
                Tag tag = tagService.createTag(tagName, true);
                if (!note.getTags().contains(tag)) { // Избегаем дублирования тегов
                    note.getTags().add(tag);
                }
            }
        } catch (IntegrationException e) {
            // Логируем ошибку и оставляем заметку без изменений
            System.err.println("Ошибка интеграции: " + e.getMessage());
        }

        return noteRepository.save(note);
    }

    public Note moveNoteToProject(UUID noteId, Project project) {
        Note note = noteRepository.findById(noteId).orElseThrow(() -> new RuntimeException("Note not found"));
        note.setProject(project);
        return noteRepository.save(note);
    }

    public Note analyzeAndAssignTags(UUID noteId) {
        Note note = noteRepository.findById(noteId).orElseThrow(() -> new RuntimeException("Note not found"));

        // Вызываем интеграционный сервис для анализа содержимого
        List<String> autoTags = integrationService.analyzeNoteContent(note);

        // Присваиваем автоматически сгенерированные теги
        for (String tagName : autoTags) {
            Tag tag = tagService.createTag(tagName, true);
            if (!note.getTags().contains(tag)) { // Избегаем дублирования тегов
                note.getTags().add(tag);
            }
        }

        return noteRepository.save(note);
    }

    public Note addFileToNote(UUID noteId, MultipartFile file, String neuralNetwork) {
        Note note = noteRepository.findById(noteId).orElseThrow(() -> new RuntimeException("Note not found"));

        try {
            // Определяем директорию для сохранения файлов
            String uploadDir = "uploads/";
            Path uploadPath = Paths.get(uploadDir);

            if (!Files.exists(uploadPath)) {
                Files.createDirectories(uploadPath);
            }

            // Генерируем имя файла
            String originalFileName = StringUtils.cleanPath(file.getOriginalFilename());
            String filePath = uploadPath.resolve(originalFileName).toString();
            Files.copy(file.getInputStream(), Paths.get(filePath));

            // Обновляем информацию в заметке
            note.setFilePath(filePath);
            note.setFileType(detectFileType(originalFileName));
            if (neuralNetwork != null) {
                note.setNeuralNetwork(neuralNetwork);
            }

            return noteRepository.save(note);
        } catch (Exception e) {
            throw new RuntimeException("Ошибка при загрузке файла: " + e.getMessage(), e);
        }
    }

    private String detectFileType(String fileName) {
        if (fileName.endsWith(".pdf")) {
            return "pdf";
        } else if (fileName.endsWith(".doc") || fileName.endsWith(".docx")) {
            return "doc";
        } else if (fileName.endsWith(".xls") || fileName.endsWith(".xlsx")) {
            return "xls";
        } else if (fileName.endsWith(".txt")) {
            return "txt";
        } else if (fileName.endsWith(".csv")) {
            return "csv";
        } else if (fileName.endsWith(".jpg") || fileName.endsWith(".jpeg") || fileName.endsWith(".png")) {
            return "image";
        }
        return "unknown";
    }

    public Note addAudioToNote(UUID noteId, MultipartFile file) {
        Note note = noteRepository.findById(noteId).orElseThrow(() -> new RuntimeException("Note not found"));

        try {
            // Определяем директорию для сохранения аудиофайлов
            String uploadDir = "uploads/audio/";
            Path uploadPath = Paths.get(uploadDir);

            if (!Files.exists(uploadPath)) {
                Files.createDirectories(uploadPath);
            }

            // Генерируем имя файла
            String originalFileName = StringUtils.cleanPath(file.getOriginalFilename());
            String filePath = uploadPath.resolve(originalFileName).toString();
            Files.copy(file.getInputStream(), Paths.get(filePath));

            // Обновляем информацию в заметке
            note.setAudioFilePath(filePath);
            return noteRepository.save(note);
        } catch (Exception e) {
            throw new RuntimeException("Ошибка при загрузке аудиофайла: " + e.getMessage(), e);
        }
    }

    public Note createNote(String content, String fileUrl, String fileName) {
        Note note = new Note();
        note.setContent(content);
        if (fileUrl != null && fileName != null) {
            note.setFilePath(fileUrl);
            note.setFileType(detectFileType(fileName));
        }
        noteRepository.save(note);

        // Отправляем на анализ
        List<String> tags = integrationService.analyzeNoteContent(note);
        // Присваиваем автоматически сгенерированные теги
        for (String tagName : tags) {
            Tag tag = tagService.createTag(tagName, true);
            if (!note.getTags().contains(tag)) { // Избегаем дублирования тегов
                note.getTags().add(tag);
            }
        }
        noteRepository.save(note);

        return note;
    }
}
