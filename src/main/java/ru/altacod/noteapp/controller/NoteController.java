package ru.altacod.noteapp.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import ru.altacod.noteapp.dto.NoteAudioDTO;
import ru.altacod.noteapp.dto.NoteDTO;
import ru.altacod.noteapp.dto.NoteFileDTO;
import ru.altacod.noteapp.dto.OpenGraphRequest;
import ru.altacod.noteapp.mapper.NoteAudioConverter;
import ru.altacod.noteapp.mapper.NoteConverter;
import ru.altacod.noteapp.mapper.NoteFileConverter;
import ru.altacod.noteapp.model.*;
import ru.altacod.noteapp.repository.NoteAudioRepository;
import ru.altacod.noteapp.repository.NoteFileRepository;
import ru.altacod.noteapp.repository.UserRepository;
import ru.altacod.noteapp.service.NoteService;
import ru.altacod.noteapp.service.ProjectService;
import ru.altacod.noteapp.service.TagService;
import ru.altacod.noteapp.utils.SecurityUtils;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.*;

import jakarta.persistence.EntityNotFoundException;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.http.MediaType;

import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/notes")
@CrossOrigin(origins = "http://localhost:3000")
public class NoteController {

    private final NoteService noteService;
    private final ProjectService projectService;
    private final NoteConverter noteConverter;
    private final TagService tagService;
    private final UserRepository userRepository;
    private final NoteFileRepository noteFileRepository;
    private final NoteAudioRepository noteAudioRepository;
    private final NoteFileConverter noteFileConverter;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É—Ç–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    private final String fileStoragePath = System.getenv("FILE_STORAGE_PATH");
    private final String audioStoragePath = System.getenv("AUDIO_STORAGE_PATH");


    public NoteController(NoteService noteService, ProjectService projectService, NoteConverter noteConverter, TagService tagService, UserRepository userRepository, NoteFileRepository noteFileRepository, NoteAudioRepository noteAudioRepository, NoteFileConverter noteFileConverter) {
        this.noteService = noteService;
        this.projectService = projectService;
        this.noteConverter = noteConverter;
        this.tagService = tagService;
        this.userRepository = userRepository;
        this.noteFileRepository = noteFileRepository;
        this.noteAudioRepository = noteAudioRepository;
        this.noteFileConverter = noteFileConverter;
    }

    public UUID getCurrentUserId() {
        return userRepository.findByUsername(SecurityUtils.getCurrentUserId()).getId();
    }

    @Operation(summary = "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –¥—Ä—É–≥–æ–π –ø—Ä–æ–µ–∫—Ç", description = "–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –º–µ–∂–¥—É –ø—Ä–æ–µ–∫—Ç–∞–º–∏.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = Note.class))),
            @ApiResponse(responseCode = "404", description = "–ó–∞–º–µ—Ç–∫–∞ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"),
            @ApiResponse(responseCode = "500", description = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    @PutMapping("/{noteId}/move")
    public Note moveNoteToProject(@PathVariable UUID noteId, @RequestParam UUID projectId) {
        UUID userId = userRepository.findByUsername(SecurityUtils.getCurrentUserId()).getId();
        Project project = projectService.getProjectById(projectId, userId );
        return noteService.moveNoteToProject(noteId, project);
    }

    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
    })
    @GetMapping
    public List<NoteDTO> getAllNotes() {
        List<Note> notes = noteService.getAllNotes();
        return notes.stream().map(noteConverter::toDTO).collect(Collectors.toList());
    }

    @Operation(summary = "–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫", description = "–ò—â–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É, OpenGraph URL –∏ –∏–º–µ–Ω–∞–º —Ñ–∞–π–ª–æ–≤.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã"),
            @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"),
            @ApiResponse(responseCode = "500", description = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    @GetMapping("/search")
    public ResponseEntity<List<NoteDTO>> searchNotes(@RequestParam String query) {
        List<NoteDTO> results = noteService.searchNotes(query);
        return ResponseEntity.ok(results);
    }


    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ç—ç–≥–∞–º–∏")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
    })
    @GetMapping("/tags/search")
    public List<NoteDTO> getNotesByTags(@RequestParam List<String> tags) {
        List<Note> notes = noteService.getNotesByTags(tags);
        return notes.stream().map(noteConverter::toDTO).collect(Collectors.toList());
    }

    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç—ç–≥–∏")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—ç–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
    })
    @GetMapping("/tags")
    public List<String> getAllUniqueTags() {
        return noteService.getAllUniqueTags();
    }

//


    @PutMapping(value="/full",  consumes = {"multipart/form-data"})
    @Operation(summary = "–û–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏", description = "–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—è–º–∏.")
    public ResponseEntity<?> saveFullNote(
            @RequestPart("note") NoteDTO noteDTO,
            @RequestPart(value = "files", required = false) List<MultipartFile> uploadedFiles,
            @RequestPart(value = "audios", required = false) List<MultipartFile> uploadedAudios,
            @RequestPart(value = "deletedFiles", required = false) String deletedFilesJson,
            @RequestPart(value = "deletedAudios", required = false) String deletedAudiosJson) throws JsonProcessingException {

        // üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ —Å–ø–∏—Å–æ–∫ UUID
        List<UUID> deletedFiles = new ArrayList<>();
        try {
            if (deletedFilesJson != null && !deletedFilesJson.isEmpty()) {
                ObjectMapper objectMapper = new ObjectMapper();
                deletedFiles = objectMapper.readValue(deletedFilesJson, new TypeReference<List<UUID>>() {
                });
            }
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }

        // üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ —Å–ø–∏—Å–æ–∫ UUID
        List<UUID> deletedAudios = new ArrayList<>();
        try {
            if (deletedAudiosJson != null && !deletedAudiosJson.isEmpty()) {
                ObjectMapper objectMapper = new ObjectMapper();
                deletedAudios = objectMapper.readValue(deletedAudiosJson, new TypeReference<List<UUID>>() {
                });
            }
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }


        try {
            Note savedNote = noteService.saveFullNote(noteDTO, uploadedFiles, uploadedAudios, deletedFiles, deletedAudios);
            System.out.println("–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: " + savedNote);
            System.out.println("Convert to DTO: " + noteConverter.toDTO(savedNote));
            return ResponseEntity.ok(noteConverter.toDTO(savedNote));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: " + e.getMessage());
        }
    };
//    } catch (JsonMappingException e) {
//                throw new RuntimeException(e);
//            } catch (JsonProcessingException e) {
//                throw new RuntimeException(e);
//
//
//
//
    @Operation(summary = "–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É ", description = "–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É ")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = NoteDTO.class))),
            @ApiResponse(responseCode = "404", description = "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"),
            @ApiResponse(responseCode = "500", description = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    @PutMapping
    public ResponseEntity<NoteDTO> updateNote(@RequestBody NoteDTO noteDTO, HttpServletRequest request) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–º–µ—Ç–∫—É –∏–∑ –ë–î
        Note existingNote = noteService.getNoteById(noteDTO.getId(), request);
        if (existingNote == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏
        Note updatedNote = noteService.updateNote(existingNote, noteDTO);
        NoteDTO returnedNote = noteConverter.toDTO(updatedNote);

        return ResponseEntity.ok(returnedNote);
    }

    @PostMapping("/{noteId}/files")
    @Operation(
            summary = "–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã –∑–∞–º–µ—Ç–∫–∏",
            description = "–≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ —É–¥–∞–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∑–∞–º–µ—Ç–∫–∏."
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = Note.class))),
            @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                    content = @Content(mediaType = "application/json")),
            @ApiResponse(responseCode = "404", description = "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    content = @Content(mediaType = "application/json")),
            @ApiResponse(responseCode = "500", description = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                    content = @Content(mediaType = "application/json"))
    })
    public ResponseEntity<NoteDTO> updateNoteFiles(
            @PathVariable UUID noteId,
            @RequestParam(value = "files", required = false) List<MultipartFile> newFiles,
            @RequestParam(value = "deletedFiles", required = false) List<UUID> deletedFileIds) {

        Note updatedNote = noteService.updateNoteFiles(noteId, newFiles, deletedFileIds);
        NoteDTO returnedNote=noteConverter.toDTO(updatedNote);
        return ResponseEntity.ok(returnedNote);

    }


    @PostMapping("/{noteId}/audios")
    @Operation(
            summary = "–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∑–∞–º–µ—Ç–∫–∏",
            description = "–≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–æ–≤—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏ —É–¥–∞–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏–∑ –∑–∞–º–µ—Ç–∫–∏."
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = Note.class))),
            @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                    content = @Content(mediaType = "application/json")),
            @ApiResponse(responseCode = "404", description = "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    content = @Content(mediaType = "application/json")),
            @ApiResponse(responseCode = "500", description = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                    content = @Content(mediaType = "application/json"))
    })
    public ResponseEntity<NoteDTO> updateNoteAudios(
            @PathVariable UUID noteId,
            @RequestParam(value = "audios", required = false) List<MultipartFile> newAudios,
            @RequestParam(value = "deletedAudios", required = false) List<UUID> deletedAudioIds) {

        Note updatedNote = noteService.updateNoteAudios(noteId, newAudios, deletedAudioIds);
        return ResponseEntity.ok(noteConverter.toDTO(updatedNote));
    }


    @Operation(summary = "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É", description = "–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É. –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç, url, —Ñ–∞–π–ª –∏–ª–∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = Note.class))),
            @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"),
            @ApiResponse(responseCode = "500", description = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    @PostMapping("/{projectId}")
    public ResponseEntity<?> createNote(@PathVariable UUID projectId, @RequestBody NoteDTO noteDto) {

        noteDto.setProjectId(projectId);
        noteDto.setCreatedAt(LocalDateTime.now());
        noteDto.setChangedAt(LocalDateTime.now());
        try {            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ content –Ω–µ –ø—É—Å—Ç–æ–µ
            if (noteDto.getContent() == null || noteDto.getContent().trim().isEmpty()) {
                return ResponseEntity.badRequest().body("–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            }

            List<NoteFileDTO> newFiles = Optional.ofNullable(noteDto.getFiles())
                    .orElse(Collections.emptyList()) // ‚úÖ –ï—Å–ª–∏ null, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                    .stream()
                    .map(file -> new NoteFileDTO(
                            file.getId(),
                            file.getFileUrl(),
                            file.getName(),
                            file.getFilePath(),
                            file.getCreatedAt(),
                            file.getFileType(),
                            file.getOriginalName())) // ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
                    .collect(Collectors.toList());

            List<NoteAudioDTO> newAudios = Optional.ofNullable(noteDto.getAudios())
                    .orElse(Collections.emptyList()) // ‚úÖ –ï—Å–ª–∏ null, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                    .stream()
                    .map(audio -> new NoteAudioDTO(
                            audio.getId(),
                            audio.getAudioName(),
                            audio.getUrl(),
                            audio.getCreatedAt(),
                            audio.getType(),
                            audio.getSize()))
                    .collect(Collectors.toList());

            //--------------------- –ó–ê–ì–õ–£–®–ö–ò ---------------------------

            noteDto.setNeuralNetwork("YandexGPT-Lite");
            noteDto.setAnalyze(false);

            List<String> newUrls = new ArrayList<>();
            if(noteDto.getUrls()!=null || !noteDto.getUrls().isEmpty()) {
                  newUrls=noteDto.getUrls();
            };
            if (noteDto.getId() == null) {
                noteDto.setId(UUID.randomUUID()); // ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
            }

            Note newNote = noteConverter.toEntity(noteDto);
            noteService.autoFillNoteAttributes(newNote); // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ title –∏ content

            Note savedNote = noteService.createNote(newNote, newUrls, getCurrentUserId());
            NoteDTO newNoteDTO = noteConverter.toDTO(savedNote);

            return ResponseEntity.ok(newNoteDTO);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: " + e.getMessage());
        }
    }

    @Operation(summary = "–°–æ–∑–¥–∞—Ç—å —Å–º–µ—à–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º", description = "–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞. –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = Note.class))),
            @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"),
            @ApiResponse(responseCode = "500", description = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    // —Å–æ–∑–¥–∞—Ç—å —Å–º–µ—à–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º
    @PostMapping("/mixed")
    public ResponseEntity<?> createMixedNote(@RequestBody Map<String, Object> requestBody) {
        try {
            UUID userId = UUID.fromString((String) requestBody.get("userId"));
//            User user = userRepository.findById(userId)
//                    .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

            String content = (String) requestBody.get("content");
            if (content==null || content.isEmpty()){
                content="note from telegram";
            }
            String caption =  (String) requestBody.get("caption");
            List<String> links = (List<String>) requestBody.getOrDefault("openGraph", new ArrayList<>());
            List<Map<String, Object>> audioFiles = (List<Map<String, Object>>) requestBody.getOrDefault("audios", new ArrayList<>());
            List<Map<String, Object>> noteFiles = (List<Map<String, Object>>) requestBody.getOrDefault("files", new ArrayList<>());

            NoteDTO note = new NoteDTO();
            note.setId(UUID.randomUUID());
            note.setContent(content+" files caption : "+caption);
            note.setUserId(userId);
            note.setCreatedAt(LocalDateTime.now());
            note.setChangedAt(LocalDateTime.now());
            note.setProjectId(projectService.getDefaultBotProjectForUser(userId).getId());


            note.getTags().add("telegram");

            // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫–∞ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
//            Note savedNote = noteService.saveMixedNote(note, userId);
//            note.setId(savedNote.getId());

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤

            List<NoteFile> files = noteFiles.stream().map(data -> {
                NoteFile file = new NoteFile();
//                file.setId(UUID.randomUUID());
                String tempVar= (String) data.get("serverFilePath");
                file.setServerFilePath(tempVar);
//                file.setFilePath((String) data.get("filePath"));
                file.setOriginalName((String) data.get("originalName"));
                file.setFileType((String) data.get("fileType"));
                file.setCreatedAt(LocalDateTime.now());
                return file;
            }).toList();
//            note.setFiles(files);

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ
            List<NoteAudio> audios = audioFiles.stream().map(data -> {
                NoteAudio audio = new NoteAudio();
//                audio.setId(UUID.randomUUID());
                audio.setUrl((String) data.get("url"));
                audio.setCreatedAt(LocalDateTime.now());
                audio.setAudioType((String) data.get("type"));//
                audio.setAudioFilePath((String) data.get("serverFilePath"));//
                audio.setSize(new BigDecimal(data.get("size").toString()));//
                audio.setCreatedAt(LocalDateTime.now());
                return audio;
            }).toList();
//            note.setAudios(audios);
            NoteAudio noteAudio = new NoteAudio();

            Note savedNote= noteService.saveMixedNote(note, userId, links);
            if (savedNote == null) {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π.");
            }
            if (!files.isEmpty()) {
                savedNote = noteService.attachFilesToNote(savedNote.getId(), files);
                if (savedNote == null) {
                    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                            .body("–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤.");
                }
            }
            // –®–∞–≥ 3. –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if (!audios.isEmpty()) {
                savedNote = noteService.attachAudiosToNote(savedNote.getId(), audios);
                if (savedNote == null) {
                    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                            .body("–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —Ñ–∞–π–ª—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.");
                }
            }
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            String responseMessage = "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å id: " + savedNote.getId() +
                    ". –§–∞–π–ª—ã: " + files.size() + ", –∞—É–¥–∏–æ: " + audios.size() + ".";
            return ResponseEntity.ok(responseMessage);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: " + e.getMessage());
        }
    }

//    @PostMapping("/{noteId}/files")
//    public ResponseEntity<Note> uploadFilesToNote(@PathVariable UUID noteId, @RequestParam(value = "files", required = false)  List<MultipartFile> files) {
//
//        if (files == null || files.isEmpty()) {
//            System.out.println("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã.");
//            Note note = noteService.getNoteById(noteId, null);
//
//            note.getFiles().clear();
//            noteFileRepository.deleteAll(note.getFiles()); // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
//            return ResponseEntity.ok(noteService.saveNote(note,null));
//        }
//
//        Note updatedNote = noteService.addFilesToNote(noteId, files);
//        System.out.println("—Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã "+ files.size());
//        return ResponseEntity.ok(updatedNote);
//    }

//    @PostMapping("/{noteId}/audios")
//    public ResponseEntity<Note> uploadAudiosToNote(
//            @PathVariable UUID noteId,
//            @RequestParam(value = "audios", required = false) List<MultipartFile> audios) {
//
//        if (audios == null || audios.isEmpty()) {
//            System.out.println("–ó–∞–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–º–µ—Ç–∫—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.");
//            Note note = noteService.getNoteById(noteId, null);
//            note.getAudios().clear();
//            noteAudioRepository.deleteAll(note.getAudios());
//            return ResponseEntity.ok(noteService.saveNote(note,null));
//        }
//
//        Note note = noteService.getNoteById(noteId, null);
//
//        Note updatedNote = noteService.addAudiosToNote(noteId, audios);
//        System.out.println("–∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã "+ audios.size());
//        return ResponseEntity.ok(updatedNote);
//    }

    @PutMapping("/{noteId}/coordinates")
    @Operation(summary = "–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–º–µ—Ç–∫–∏", description = "–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –∏ Y –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"),
            @ApiResponse(responseCode = "404", description = "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"),
            @ApiResponse(responseCode = "500", description = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<NoteDTO> updateNoteCoordinates(
            @PathVariable UUID noteId,
            @RequestBody Map<String, Long> coordinates) {
        try {
            Long x = coordinates.get("x");
            Long y = coordinates.get("y");

            Note updatedNote = noteService.updateNoteCoordinates(noteId, x, y);
            return ResponseEntity.ok(noteConverter.toDTO(updatedNote));
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }


    @GetMapping("/download/audio/{filename:.+}")
    public ResponseEntity<Resource> downloadAudioFile(@PathVariable String filename) {
        Path filePath = Paths.get(audioStoragePath).resolve(filename).normalize();
        System.out.println("–≠–Ω–¥–ø–æ–π–Ω—Ç /download/audio/filename downloadAudioFile: "+filePath);

        try {
            Resource resource = new UrlResource(filePath.toUri());
            if (!resource.exists()) {
                return ResponseEntity.notFound().build();
            }

            return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .body(resource);
        } catch (MalformedURLException e) {
            return ResponseEntity.badRequest().build();
        }
    }

    @GetMapping("/download/file/{filename:.+}")
    public ResponseEntity<Resource> downloadFile(@PathVariable String filename) {
        Path filePath = Paths.get(fileStoragePath).resolve(filename).normalize();
        System.out.println("–≠–Ω–¥–ø–æ–π–Ω—Ç /download/file/filename downloadFile: "+filePath);

        try {
            Resource resource = new UrlResource(filePath.toUri());
            if (!resource.exists()) {
                return ResponseEntity.notFound().build();
            }

            return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .body(resource);
        } catch (MalformedURLException e) {
            return ResponseEntity.badRequest().build();
        }
    }

    @Operation(summary = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", description = "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = Note.class))),
            @ApiResponse(responseCode = "404", description = "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"),
            @ApiResponse(responseCode = "500", description = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    @PutMapping("/{noteId}/analyze")
    public Note analyzeNote(@PathVariable UUID noteId, @RequestParam String chatId) {
        return noteService.analyzeAndAssignTags(noteId, chatId);
    }

    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ ID", description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = Note.class))),
            @ApiResponse(responseCode = "404", description = "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"),
            @ApiResponse(responseCode = "500", description = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    @GetMapping("/{id}")
    public Note getNoteById(@PathVariable UUID id, HttpServletRequest request) {
        return noteService.getNoteById(id, request);
    }

    @PutMapping("/group/analyze")
    @Operation(summary = "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥—Ä—É–ø–ø—É –∑–∞–º–µ—Ç–æ–∫",
            description = "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥—Ä—É–ø–ø—É –∑–∞–º–µ—Ç–æ–∫ –ø–æ –∏—Ö ID.")
    public Note analyzeGroup(
            @RequestParam List<UUID> noteIds,
            @RequestParam String chatId
    ) {
        return noteService.analyzeGroupNotes(noteIds, chatId);
    }

    @PutMapping("/project/{projectId}/analyze")
    @Operation(summary = "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞",
            description = "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
    public Note analyzeProjectNotes(
            @PathVariable UUID projectId,
            @RequestParam String chatId
    ) {
        return noteService.analyzeProjectNotes(projectId, chatId);
    }

    @GetMapping("/{projectId}/notes")
    public List<NoteDTO> getNotesByProject(@PathVariable UUID projectId, HttpServletRequest request) {
        List<Note> notes = noteService.getNotesByProjectId(projectId, request);


        return notes.stream()
                .map(note -> {
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Note –≤ NoteDTO
                    NoteDTO noteDTO = noteConverter.toDTO(note);

                    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ OpenGraphData –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
                    List<OpenGraphData> openGraphDataList = noteService.getOpenGraphDataForNote(note.getId());

                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ OpenGraphData –≤ –∫–∞—Ä—Ç—É, –≥–¥–µ –∫–ª—é—á - URL
                    Map<String, OpenGraphData> openGraphDataMap = openGraphDataList.stream()
                            .collect(Collectors.toMap(OpenGraphData::getUrl, data -> data));
//                    System.out.println(openGraphDataMap);

                    // –î–æ–±–∞–≤–ª—è–µ–º OpenGraphData –≤ NoteDTO
                    noteDTO.setOpenGraphData(openGraphDataMap);

                    return noteDTO;
                })
                .collect(Collectors.toList());
    }

    @Operation(
            summary = "–ü–æ–ª—É—á–∏—Ç—å OpenGraph –æ–±—ä–µ–∫—Ç –ø–æ URL",
            description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç OpenGraphData, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º URL.",
            responses = {
                    @ApiResponse(
                            responseCode = "200",
                            description = "–û–±—ä–µ–∫—Ç OpenGraphData —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω",
                            content = @Content(
                                    mediaType = "application/json",
                                    schema = @Schema(implementation = OpenGraphData.class)
                            )
                    ),
                    @ApiResponse(
                            responseCode = "404",
                            description = "–û–±—ä–µ–∫—Ç OpenGraphData –Ω–µ –Ω–∞–π–¥–µ–Ω",
                            content = @Content(mediaType = "application/json")
                    ),
                    @ApiResponse(
                            responseCode = "500",
                            description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                            content = @Content(mediaType = "application/json")
                    )
            }
    )
    @GetMapping("/og-data-clear")
    public ResponseEntity<OpenGraphData> getOpenGraphDataByUrl(@RequestParam String url) {
        try {
            OpenGraphData openGraphData = noteService.fetchOpenGraphDataClear(url);
            return ResponseEntity.ok(openGraphData);
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        }
    }

    @PostMapping("/og-data")
    @Operation(
            summary = "–ü–æ–ª—É—á–∏—Ç—å OpenGraph –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏",
            description = "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ URL –∏ ID –∑–∞–º–µ—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ OpenGraph –æ–±—ä–µ–∫—Ç–æ–≤, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–µ.",
            responses = {
                    @ApiResponse(
                            responseCode = "200",
                            description = "–ú–∞—Å—Å–∏–≤ OpenGraph –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω",
                            content = @Content(
                                    mediaType = "application/json",
                                    schema = @Schema(implementation = OpenGraphData.class)
                            )
                    ),
                    @ApiResponse(
                            responseCode = "404",
                            description = "–ó–∞–º–µ—Ç–∫–∞ –∏–ª–∏ OpenGraph –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                            content = @Content(mediaType = "application/json")
                    ),
                    @ApiResponse(
                            responseCode = "500",
                            description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                            content = @Content(mediaType = "application/json")
                    )
            }
    )
    public ResponseEntity<List<OpenGraphData>> getOpenGraphDataForNote(
            @RequestBody OpenGraphRequest request
    ) {
        try {
            List<OpenGraphData> openGraphDataList = noteService.getOpenGraphDataForNote(request.getNoteId());
//            List<OpenGraphData> openGraphDataList = noteService.getOpenGraphDataForNote(request.getNoteId(), request.getUrls());
            return ResponseEntity.ok(openGraphDataList);
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
    }
    @PostMapping("/bot/files")
    public ResponseEntity<?> uploadFilesFromBot(@RequestBody Map<String, Object> requestBody) {
        if (requestBody.get("userId") == null || requestBody.get("noteId") == null || requestBody.get("fileUrls") == null) {
            return ResponseEntity.badRequest().body("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.");
        }

        UUID userId = UUID.fromString((String) requestBody.get("userId"));
        UUID noteId = UUID.fromString((String) requestBody.get("noteId"));
        List<String> fileUrls = (List<String>) requestBody.get("fileUrls");

        try {
            Note note = noteService.getNoteById(noteId, null);
            if (!note.getUser().getId().equals(userId)) {
                return ResponseEntity.status(HttpStatus.FORBIDDEN).body("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–ª–∞–¥–µ–µ—Ç —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–æ–π.");
            }

            List<NoteFile> newFiles = new ArrayList<>();
            for (String fileUrl : fileUrls) {
                String fileName = UUID.randomUUID() + ".file";
                String savedPath = noteService.downloadFileFromBot(fileUrl, "files/", fileName);

                NoteFileDTO newFile = new NoteFileDTO();
                newFile.setId(UUID.randomUUID());
                newFile.setFileUrl(savedPath);
                newFile.setFileName(fileName);
                newFile.setCreatedAt(LocalDateTime.now());
                newFile.setFilePath("files/" + fileName);
                NoteFile newFileEntity = noteFileConverter.toEntity(newFile);

                newFiles.add(newFileEntity);
            }

            note.setFiles(newFiles);
            Note updatedNote = noteService.saveNote(note, userId);
            return ResponseEntity.ok(updatedNote);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤: " + e.getMessage());
        }
    }
    @DeleteMapping("/{noteId}")
    @Operation(summary = "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", description = "–£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ ID.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"),
            @ApiResponse(responseCode = "404", description = "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"),
            @ApiResponse(responseCode = "500", description = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<?> deleteNote(@PathVariable UUID noteId) {
        try {
            noteService.deleteNoteById(noteId);
            return ResponseEntity.ok("–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: " + e.getMessage());
        }
    }

}

