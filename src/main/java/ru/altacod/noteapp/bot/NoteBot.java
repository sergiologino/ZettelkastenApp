package ru.altacod.noteapp.bot;

import jakarta.annotation.PostConstruct;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiRequestException;
import ru.altacod.noteapp.model.Project;
import ru.altacod.noteapp.model.User;
import ru.altacod.noteapp.repository.UserRepository;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.altacod.noteapp.service.ProjectService;

import java.io.File;
import java.io.InputStream;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.LocalDateTime;
import java.util.*;

@Service
public class NoteBot extends TelegramLongPollingBot {

    private final UserRepository userRepository;
    private final RestTemplate restTemplate = new RestTemplate();
    private final ProjectService projectService;

    @Value("${telegram.bot.token}")
    private String botToken;

    @Value("${telegram.bot.username}")
    private String botUsername;

    @Value("${backend.url}")
    private String backendUrl;

    private final Map<String, Message> projectSelectionCache = new HashMap<>();


    public NoteBot(UserRepository userRepository, ProjectService projectService) {
        this.userRepository = userRepository;
        this.projectService = projectService;

    }

    public UUID getCurrentUserId(String username) {
        Optional<User> currentUser=userRepository.findByTlgUsername(username.replace("@", ""));
        if(currentUser.isPresent()) {
            return currentUser.get().getId();
        }
        return null;
    }


//    public User getCurrentUser() {
//
//    }
    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Transactional
    @Override
    public void onUpdateReceived(Update update) {

        if (update.hasMessage()) {
            Message message = update.getMessage();
            String chatId = message.getChatId().toString();

            // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º
            boolean isForwarded = message.getForwardFrom() != null
                    || message.getForwardFromChat() != null
                    || message.getForwardSenderName() != null;

            if (isForwarded) {
                sendResponse(chatId, "‚ö†Ô∏è –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é.");
                return;
            }

            String username = message.getFrom().getUserName();

            // üîé –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ –ø–æ chatId
            Optional<User> userOptional = Optional.empty();
            if (username != null && !username.isEmpty()) {
                userOptional = userRepository.findByTlgUsername(username.replace("@", ""));
            }

            if (userOptional.isEmpty()) {
                userOptional = userRepository.findByTelegramChatId(chatId);
            }

            if (userOptional.isEmpty()) {
                sendResponse(chatId, "‚ùå –û—à–∏–±–∫–∞: –≤–∞—à Telegram-–∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –£–∫–∞–∂–∏—Ç–µ Telegram username –≤ –ø—Ä–æ—Ñ–∏–ª–µ.");
                return;
            }

            User user = userOptional.get();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º chatId, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
            if (user.getTelegramChatId() == null || user.getTelegramChatId().isEmpty()) {
                user.setTelegramChatId(chatId);
                userRepository.saveAndFlush(user);
            }

            // üîÄ –û–±—Ä–∞–±–æ—Ç–∫–∞: –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë–º –∑–∞–º–µ—Ç–∫—É
            if (user.isAskProjectBeforeSave()) {
                sendProjectSelection(chatId, message, user);
            } else {
                UUID projectMock = null;
                handleMixedMessage(message, user, projectMock);
            }

        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery());
        }
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        String chatId = callbackQuery.getMessage().getChatId().toString();
        String data = callbackQuery.getData();

        if (data.startsWith("PRJ_")) {
            String[] parts = data.split("_", 3); // ‚úÖ –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 3 —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å UUID
            if (parts.length < 3) {
                sendResponse(chatId, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞.");
                return;
            }
            String selectionKey  = parts[1]; // –ü–æ–ª—É—á–∞–µ–º selectionKey - –∫–ª—é—á –∑–∞–º–µ—Ç–∫–∏
            String projectIdStr  = parts[2]; // –ü–æ–ª–Ω—ã–π UUID –ø—Ä–æ–µ–∫—Ç–∞


            Optional<User>  optionalUser = userRepository.findByTelegramChatId(chatId);
                    if (optionalUser.isEmpty()) {
                        // –ï—Å–ª–∏ chatId –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID
                        sendResponse(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                        return;
                    };
            User user = optionalUser.get();


            // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
            Message originalMessage = projectSelectionCache.get(selectionKey);
            if (originalMessage == null) {
                sendResponse(chatId, "–û—à–∏–±–∫–∞: –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                return;
            }
            projectSelectionCache.remove(selectionKey); // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

          // –ù–∞–π—Ç–∏ –ø–æ–ª–Ω—ã–π projectId –ø–æ –µ–≥–æ —É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º `projectIdStr` –≤ `UUID`
            UUID projectId;
            try {
                projectId = UUID.fromString(projectIdStr);
            } catch (IllegalArgumentException e) {
                sendResponse(chatId, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞.");
                return;
            }
            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            Project selectedProject = projectService.getProjectById(projectId, user.getId());

            // ‚úÖ –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            removeInlineKeyboard(callbackQuery.getMessage());

            // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sendResponse(chatId, "‚úÖ –†–∞–∑–º–µ—â–µ–Ω–æ –≤ **" + selectedProject.getName() + "**");

            // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–µ–∫—Ç –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            handleMixedMessage(originalMessage, user, projectId);
        }
    }
    private void removeInlineKeyboard(Message message) {
        EditMessageReplyMarkup editMarkup = new EditMessageReplyMarkup();
        editMarkup.setChatId(message.getChatId().toString());
        editMarkup.setMessageId(message.getMessageId());
        editMarkup.setReplyMarkup(null); // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        try {
            execute(editMarkup);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }



    private void sendProjectSelection(String chatId, Message message, User user) {
        List<Project> projects = projectService.getAllProjectsForUser(user.getId());
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>(); // ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
        String selectionKey = UUID.randomUUID().toString().substring(0, 8);
        projectSelectionCache.put(selectionKey, message); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –ø–∞–º—è—Ç–∏

        for (Project project : projects) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(project.getName());
            button.setCallbackData("PRJ_" + selectionKey + "_" + project.getId()); // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π UUID –ø—Ä–æ–µ–∫—Ç–∞
            keyboard.add(Collections.singletonList(button)); // ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(keyboard); // ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

        SendMessage responseMessage  = new SendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:");
        responseMessage.setReplyMarkup(markup);
        try {
            execute(responseMessage); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ API Telegram
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


    private void handleMixedMessage(Message message, User user, UUID projectId) {
        String chatId = message.getChatId().toString();
        String text = message.hasText() ? message.getText() : null;
        List<String> links = new ArrayList<>();
        List<Map<String, Object>> audioFiles = new ArrayList<>();
        List<Map<String, Object>> noteFiles = new ArrayList<>();

        // –†–∞–∑–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏
        StringBuilder contentBuilder = new StringBuilder();
        if (text != null) {
            String[] words = text.split("\\s+");
            for (String word : words) {
                if (word.startsWith("http://") || word.startsWith("https://")) {
                    links.add(word.trim());
                } else {
                    contentBuilder.append(word).append(" ");
                }
            }
        }
        text = contentBuilder.toString().trim();


        // –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (message.hasVoice()) {
            String fileId = message.getVoice().getFileId();
            String downloadedPath = downloadFileFromTelegram(fileId, "audio");
            if (downloadedPath != null) {
                Map<String, Object> audioData = new HashMap<>();
                audioData.put("serverFilePath", downloadedPath);
                audioData.put("originalName", "voice_message.ogg");
                audioData.put("audioType", "ogg");
                audioData.put("size", new File(downloadedPath).length());
                audioData.put("createdAt", LocalDateTime.now());
                audioFiles.add(audioData);
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (message.hasDocument()) {
            String fileId = message.getDocument().getFileId();
            String fileName = message.getDocument().getFileName();
            String downloadedPath = downloadFileFromTelegram(fileId, "files");
            if (downloadedPath != null) {
                Map<String, Object> fileData = new HashMap<>();
                fileData.put("serverFilePath", downloadedPath);
                fileData.put("originalName", fileName);
                fileData.put("fileType", detectFileType(fileName));
                fileData.put("size", new File(downloadedPath).length());
                fileData.put("createdAt", LocalDateTime.now());
                noteFiles.add(fileData);
            }
        } else if (message.hasPhoto()) {
            String fileId = message.getPhoto().get(message.getPhoto().size() - 1).getFileId();
            String downloadedPath = downloadFileFromTelegram(fileId, "files");
            if (downloadedPath != null) {
                Map<String, Object> fileData = new HashMap<>();
                fileData.put("serverFilePath", downloadedPath);
                fileData.put("originalName", "photo.jpg");
                fileData.put("fileType", "image");
                fileData.put("size", new File(downloadedPath).length());
                fileData.put("createdAt", LocalDateTime.now());
                noteFiles.add(fileData);
            }

        }

        // üìù –ü–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        String caption="";
        if (noteFiles!= null && noteFiles.size() > 0) {
            caption= message.getCaption();
            if (caption==null || caption.isEmpty()) {
                caption = text.trim();
            }

        }


        // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥
        sendMixedNoteToBackend(
                caption != null ? caption : "–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ –∏–∑ Telegram",
                text,
                links,
                audioFiles,
                noteFiles,
                user,
                projectId);
        sendResponse(chatId, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.");
    }


    private void sendMixedNoteToBackend(String caption, String content, List<String> links,
                                        List<Map<String, Object>> audioFiles,
                                        List<Map<String, Object>> noteFiles,
                                        User user,
                                        UUID projectId) {
        try {
            RestTemplate restTemplate = new RestTemplate();
            Map<String, Object> requestBody = new HashMap<>();


            if (content != null) {
                requestBody.put("content", content);
            }else{
                requestBody.put("content", "message from telegram");
            };
            if (caption != null) {
                requestBody.put("caption", caption);
            }else{
                requestBody.put("caption", "caption");
            };

            if (!links.isEmpty()) requestBody.put("openGraph", links);
            if (!audioFiles.isEmpty()) requestBody.put("audios", audioFiles);
            if (!noteFiles.isEmpty()) requestBody.put("files", noteFiles);
            requestBody.put("userId", user.getId().toString());
            if(!(projectId ==null)){
                requestBody.put("projectId", projectId.toString());
            }

            String url = backendUrl + "/api/notes/mixed";
            restTemplate.postForEntity(
                    url,
                    requestBody,
                    String.class
            );
        } catch (Exception e) {
            e.printStackTrace();
        }
    }



    // –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–∞–π–ª–∞ –ø–æ –µ–≥–æ ID
    private String getFileUrl(String fileId) {
        try {
            String filePath = execute(new GetFile(fileId)).getFilePath();
            return "https://api.telegram.org/file/bot" + botToken + "/" + filePath;
        } catch (TelegramApiException e) {
            e.printStackTrace();
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: " + e.getMessage(), e);
        }
    }


    private void sendFilesToBackend(String noteId, List<String> fileUrls, User user) {
        try {
            RestTemplate restTemplate = new RestTemplate();
            Map<String, Object> requestBody = new HashMap<>();
            requestBody.put("userId", user.getId().toString());
            requestBody.put("noteId", noteId);
            requestBody.put("fileUrls", fileUrls);

            restTemplate.postForEntity(
                    "http://localhost:8080/api/notes/bot/files",
                    requestBody,
                    String.class
            );
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void sendResponse(String chatId, String response) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(response);
        message.enableMarkdown(true); // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ **–∂–∏—Ä–Ω–æ–≥–æ** —Ç–µ–∫—Å—Ç–∞
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void analyzeNoteInBackend(String noteId, String chatId) {

        try {
            RestTemplate restTemplate = new RestTemplate();
            restTemplate.postForEntity(
                    "http://localhost:8080/api/notes/" + noteId + "/analyze?chatId=" + chatId,
                    null, Void.class
            );
            sendResponse(chatId, "–ó–∞–º–µ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.");
        } catch (Exception e) {
            sendResponse(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑: " + e.getMessage());
        }
    }


private String downloadFileFromTelegram(String fileId, String folder) {
    try {
        System.out.println("üì• –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏–∑ Telegram: fileId = " + fileId);

        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Telegram
        GetFile getFile = new GetFile();
        getFile.setFileId(fileId);
        String filePath = execute(getFile).getFilePath();

        if (filePath == null || filePath.isEmpty()) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞: Telegram –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è fileId = " + fileId);
            return null;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        String fileUrl = "https://api.telegram.org/file/bot" + botToken + "/" + filePath;
        System.out.println("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: " + fileUrl);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        String fileName = UUID.randomUUID() + "_" + filePath.substring(filePath.lastIndexOf("/") + 1);
        String localFilePath = "E:/uploaded/" + folder + "/" + fileName;

        // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        Path savePath = Paths.get("E:/uploaded/" + folder);
        if (!Files.exists(savePath)) {
            Files.createDirectories(savePath);
        }

        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        try (InputStream in = new URL(fileUrl).openStream()) {
            Files.copy(in, Paths.get(localFilePath), StandardCopyOption.REPLACE_EXISTING);
        }

        System.out.println("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: " + localFilePath);
        return localFilePath;
    } catch (Exception e) {
        System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –∏–∑ Telegram: " + e.getMessage());
        return null;
    }
}


    private String detectFileType(String fileName) {
        if (fileName == null || fileName.isEmpty()) {
            return "unknown";
        }

        String lowerCaseName = fileName.toLowerCase();

        if (lowerCaseName.endsWith(".pdf")) {
            return "pdf";
        } else if (lowerCaseName.endsWith(".doc") || lowerCaseName.endsWith(".docx")) {
            return "document";
        } else if (lowerCaseName.endsWith(".xls") || lowerCaseName.endsWith(".xlsx")) {
            return "spreadsheet";
        } else if (lowerCaseName.endsWith(".ppt") || lowerCaseName.endsWith(".pptx")) {
            return "presentation";
        } else if (lowerCaseName.endsWith(".txt") || lowerCaseName.endsWith(".md")) {
            return "text";
        } else if (lowerCaseName.endsWith(".csv")) {
            return "csv";
        } else if (lowerCaseName.endsWith(".jpg") || lowerCaseName.endsWith(".jpeg") || lowerCaseName.endsWith(".png") || lowerCaseName.endsWith(".gif") || lowerCaseName.endsWith(".bmp") || lowerCaseName.endsWith(".tiff") || lowerCaseName.endsWith(".svg")) {
            return "image";
        } else if (lowerCaseName.endsWith(".mp3") || lowerCaseName.endsWith(".wav") || lowerCaseName.endsWith(".ogg") || lowerCaseName.endsWith(".flac") || lowerCaseName.endsWith(".aac")) {
            return "audio";
        } else if (lowerCaseName.endsWith(".mp4") || lowerCaseName.endsWith(".avi") || lowerCaseName.endsWith(".mov") || lowerCaseName.endsWith(".mkv") || lowerCaseName.endsWith(".flv")) {
            return "video";
        } else if (lowerCaseName.endsWith(".zip") || lowerCaseName.endsWith(".rar") || lowerCaseName.endsWith(".7z") || lowerCaseName.endsWith(".tar") || lowerCaseName.endsWith(".gz")) {
            return "archive";
        } else if (lowerCaseName.endsWith(".json") || lowerCaseName.endsWith(".xml") || lowerCaseName.endsWith(".yaml") || lowerCaseName.endsWith(".yml")) {
            return "data";
        } else {
            return "unknown";
        }
    }

}

